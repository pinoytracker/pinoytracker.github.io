# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Tue Dec 10 17:11:29 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))